defmodule OpenTelemetry.SemConv.Incubating.UserAgentAttributes do
  # This is an auto-generated file
  @moduledoc """
  OpenTelemetry Semantic Conventions for User_Agent attributes.
  """
  defdelegate user_agent_original(), to: OpenTelemetry.SemConv.UserAgentAttributes

  @doc """
  Name of the user-agent extracted from original. Usually refers to the browser's name.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  [Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name **SHOULD** be selected. In such a scenario it should align with `user_agent.version`

  ### Examples

  ```
  ["Safari", "YourApp"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_name()
      :"user_agent.name"

  ### Erlang

  ```erlang
  ?USER_AGENT_NAME.
  'user_agent.name'
  ```

  <!-- tabs-close -->
  """
  @spec user_agent_name :: :"user_agent.name"
  def user_agent_name do
    :"user_agent.name"
  end

  @doc """
  Human readable operating system name.
  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  For mapping user agent strings to OS names, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.

  ### Examples

  ```
  ["iOS", "Android", "Ubuntu"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_os_name()
      :"user_agent.os.name"

  ### Erlang

  ```erlang
  ?USER_AGENT_OS_NAME.
  'user_agent.os.name'
  ```

  <!-- tabs-close -->
  """
  @spec user_agent_os_name :: :"user_agent.os.name"
  def user_agent_os_name do
    :"user_agent.os.name"
  end

  @doc """
  The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  For mapping user agent strings to OS versions, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.

  ### Examples

  ```
  ["14.2.1", "18.04.1"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_os_version()
      :"user_agent.os.version"

  ### Erlang

  ```erlang
  ?USER_AGENT_OS_VERSION.
  'user_agent.os.version'
  ```

  <!-- tabs-close -->
  """
  @spec user_agent_os_version :: :"user_agent.os.version"
  def user_agent_os_version do
    :"user_agent.os.version"
  end

  @typedoc """
  Specifies the category of synthetic traffic, such as tests or bots.


  ### Enum Values
  * `:bot` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - Bot source.
  * `:test` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - Synthetic test source.
  """
  @type user_agent_synthetic_type_values() :: %{
          :bot => :bot,
          :test => :test
        }
  @doc """
  Specifies the category of synthetic traffic, such as tests or bots.


  ### Notes

  This attribute **MAY** be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.


  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_synthetic_type()
      :"user_agent.synthetic.type"

      iex> OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_synthetic_type_values().bot
      :bot

      iex> %{OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_synthetic_type() => OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_synthetic_type_values().bot}
      %{:"user_agent.synthetic.type" => :bot}

  ### Erlang

  ```erlang
  ?USER_AGENT_SYNTHETIC_TYPE.
  'user_agent.synthetic.type'

  ?USER_AGENT_SYNTHETIC_TYPE_VALUES_BOT.
  'bot'

  \#{?USER_AGENT_SYNTHETIC_TYPE => ?USER_AGENT_SYNTHETIC_TYPE_VALUES_BOT}.
  \#{'user_agent.synthetic.type' => 'bot'}
  ```

  <!-- tabs-close -->
  """
  @spec user_agent_synthetic_type :: :"user_agent.synthetic.type"
  def user_agent_synthetic_type do
    :"user_agent.synthetic.type"
  end

  @spec user_agent_synthetic_type_values() :: user_agent_synthetic_type_values()
  def user_agent_synthetic_type_values() do
    %{
      :bot => :bot,
      :test => :test
    }
  end

  @doc """
  Version of the user-agent extracted from original. Usually refers to the browser's version

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  [Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version **SHOULD** be selected. In such a scenario it should align with `user_agent.name`

  ### Examples

  ```
  ["14.1.2", "1.0.0"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.UserAgentAttributes.user_agent_version()
      :"user_agent.version"

  ### Erlang

  ```erlang
  ?USER_AGENT_VERSION.
  'user_agent.version'
  ```

  <!-- tabs-close -->
  """
  @spec user_agent_version :: :"user_agent.version"
  def user_agent_version do
    :"user_agent.version"
  end
end
