defmodule OpenTelemetry.SemConv.Incubating.VCSAttributes do
  # This is an auto-generated file
  @moduledoc """
  OpenTelemetry Semantic Conventions for VCS attributes.
  """

  @doc """
  The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Examples

  ```
  ["123"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_change_id()
      :"vcs.change.id"

  ### Erlang

  ```erlang
  ?VCS_CHANGE_ID.
  'vcs.change.id'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_change_id :: :"vcs.change.id"
  def vcs_change_id do
    :"vcs.change.id"
  end

  @typedoc """
  The state of the change (pull request/merge request/changelist).


  ### Enum Values
  * `:open` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
  * `:wip` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
  * `:closed` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
  * `:merged` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - Merged indicates that the change has been successfully integrated into the target codebase.
  """
  @type vcs_change_state_values() :: %{
          :open => :open,
          :wip => :wip,
          :closed => :closed,
          :merged => :merged
        }
  @doc """
  The state of the change (pull request/merge request/changelist).


  ### Examples

  ```
  ["open", "closed", "merged"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_change_state()
      :"vcs.change.state"

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_change_state_values().open
      :open

      iex> %{OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_change_state() => OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_change_state_values().open}
      %{:"vcs.change.state" => :open}

  ### Erlang

  ```erlang
  ?VCS_CHANGE_STATE.
  'vcs.change.state'

  ?VCS_CHANGE_STATE_VALUES_OPEN.
  'open'

  \#{?VCS_CHANGE_STATE => ?VCS_CHANGE_STATE_VALUES_OPEN}.
  \#{'vcs.change.state' => 'open'}
  ```

  <!-- tabs-close -->
  """
  @spec vcs_change_state :: :"vcs.change.state"
  def vcs_change_state do
    :"vcs.change.state"
  end

  @spec vcs_change_state_values() :: vcs_change_state_values()
  def vcs_change_state_values() do
    %{
      :open => :open,
      :wip => :wip,
      :closed => :closed,
      :merged => :merged
    }
  end

  @doc """
  The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Examples

  ```
  ["Fixes broken thing", "feat: add my new feature", "[chore] update dependency"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_change_title()
      :"vcs.change.title"

  ### Erlang

  ```erlang
  ?VCS_CHANGE_TITLE.
  'vcs.change.title'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_change_title :: :"vcs.change.title"
  def vcs_change_title do
    :"vcs.change.title"
  end

  @typedoc """
  The type of line change being measured on a branch or change.


  ### Enum Values
  * `:added` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - How many lines were added.
  * `:removed` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - How many lines were removed.
  """
  @type vcs_line_change_type_values() :: %{
          :added => :added,
          :removed => :removed
        }
  @doc """
  The type of line change being measured on a branch or change.


  ### Examples

  ```
  ["added", "removed"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_line_change_type()
      :"vcs.line_change.type"

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_line_change_type_values().added
      :added

      iex> %{OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_line_change_type() => OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_line_change_type_values().added}
      %{:"vcs.line_change.type" => :added}

  ### Erlang

  ```erlang
  ?VCS_LINE_CHANGE_TYPE.
  'vcs.line_change.type'

  ?VCS_LINE_CHANGE_TYPE_VALUES_ADDED.
  'added'

  \#{?VCS_LINE_CHANGE_TYPE => ?VCS_LINE_CHANGE_TYPE_VALUES_ADDED}.
  \#{'vcs.line_change.type' => 'added'}
  ```

  <!-- tabs-close -->
  """
  @spec vcs_line_change_type :: :"vcs.line_change.type"
  def vcs_line_change_type do
    :"vcs.line_change.type"
  end

  @spec vcs_line_change_type_values() :: vcs_line_change_type_values()
  def vcs_line_change_type_values() do
    %{
      :added => :added,
      :removed => :removed
    }
  end

  @doc """
  The group owner within the version control system.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Examples

  ```
  ["my-org", "myteam", "business-unit"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_owner_name()
      :"vcs.owner.name"

  ### Erlang

  ```erlang
  ?VCS_OWNER_NAME.
  'vcs.owner.name'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_owner_name :: :"vcs.owner.name"
  def vcs_owner_name do
    :"vcs.owner.name"
  end

  @typedoc """
  The name of the version control system provider.


  ### Enum Values
  * `:github` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [GitHub](https://github.com)
  * `:gitlab` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [GitLab](https://gitlab.com)
  * `:gittea` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - Deprecated, use `gitea` instead.
  * `:gitea` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [Gitea](https://gitea.io)
  * `:bitbucket` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [Bitbucket](https://bitbucket.org)
  """
  @type vcs_provider_name_values() :: %{
          :github => :github,
          :gitlab => :gitlab,
          :gittea => :gittea,
          :gitea => :gitea,
          :bitbucket => :bitbucket
        }
  @doc """
  The name of the version control system provider.


  ### Examples

  ```
  ["github", "gitlab", "gitea", "bitbucket"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_provider_name()
      :"vcs.provider.name"

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_provider_name_values().github
      :github

      iex> %{OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_provider_name() => OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_provider_name_values().github}
      %{:"vcs.provider.name" => :github}

  ### Erlang

  ```erlang
  ?VCS_PROVIDER_NAME.
  'vcs.provider.name'

  ?VCS_PROVIDER_NAME_VALUES_GITHUB.
  'github'

  \#{?VCS_PROVIDER_NAME => ?VCS_PROVIDER_NAME_VALUES_GITHUB}.
  \#{'vcs.provider.name' => 'github'}
  ```

  <!-- tabs-close -->
  """
  @spec vcs_provider_name :: :"vcs.provider.name"
  def vcs_provider_name do
    :"vcs.provider.name"
  end

  @spec vcs_provider_name_values() :: vcs_provider_name_values()
  def vcs_provider_name_values() do
    %{
      :github => :github,
      :gitlab => :gitlab,
      :gittea => :gittea,
      :gitea => :gitea,
      :bitbucket => :bitbucket
    }
  end

  @doc """
  The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  `base` refers to the starting point of a change. For example, `main`
  would be the base reference of type branch if you've created a new
  reference of type branch from it and created new commits.

  ### Examples

  ```
  ["my-feature-branch", "tag-1-test"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_base_name()
      :"vcs.ref.base.name"

  ### Erlang

  ```erlang
  ?VCS_REF_BASE_NAME.
  'vcs.ref.base.name'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_ref_base_name :: :"vcs.ref.base.name"
  def vcs_ref_base_name do
    :"vcs.ref.base.name"
  end

  @doc """
  The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  `base` refers to the starting point of a change. For example, `main`
  would be the base reference of type branch if you've created a new
  reference of type branch from it and created new commits. The
  revision can be a full [hash value (see
  glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
  of the recorded change to a ref within a repository pointing to a
  commit [commit](https://git-scm.com/docs/git-commit) object. It does
  not necessarily have to be a hash; it can simply define a [revision
  number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
  which is an integer that is monotonically increasing. In cases where
  it is identical to the `ref.base.name`, it **SHOULD** still be included.
  It is up to the implementer to decide which value to set as the
  revision based on the VCS system and situational context.

  ### Examples

  ```
  ["9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc", "main", "123", "HEAD"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_base_revision()
      :"vcs.ref.base.revision"

  ### Erlang

  ```erlang
  ?VCS_REF_BASE_REVISION.
  'vcs.ref.base.revision'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_ref_base_revision :: :"vcs.ref.base.revision"
  def vcs_ref_base_revision do
    :"vcs.ref.base.revision"
  end

  @typedoc """
  The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.


  ### Enum Values
  * `:branch` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
  * `:tag` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
  """
  @type vcs_ref_base_type_values() :: %{
          :branch => :branch,
          :tag => :tag
        }
  @doc """
  The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.


  ### Notes

  `base` refers to the starting point of a change. For example, `main`
  would be the base reference of type branch if you've created a new
  reference of type branch from it and created new commits.

  ### Examples

  ```
  ["branch", "tag"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_base_type()
      :"vcs.ref.base.type"

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_base_type_values().branch
      :branch

      iex> %{OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_base_type() => OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_base_type_values().branch}
      %{:"vcs.ref.base.type" => :branch}

  ### Erlang

  ```erlang
  ?VCS_REF_BASE_TYPE.
  'vcs.ref.base.type'

  ?VCS_REF_BASE_TYPE_VALUES_BRANCH.
  'branch'

  \#{?VCS_REF_BASE_TYPE => ?VCS_REF_BASE_TYPE_VALUES_BRANCH}.
  \#{'vcs.ref.base.type' => 'branch'}
  ```

  <!-- tabs-close -->
  """
  @spec vcs_ref_base_type :: :"vcs.ref.base.type"
  def vcs_ref_base_type do
    :"vcs.ref.base.type"
  end

  @spec vcs_ref_base_type_values() :: vcs_ref_base_type_values()
  def vcs_ref_base_type_values() do
    %{
      :branch => :branch,
      :tag => :tag
    }
  end

  @doc """
  The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  `head` refers to where you are right now; the current reference at a
  given time.

  ### Examples

  ```
  ["my-feature-branch", "tag-1-test"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_head_name()
      :"vcs.ref.head.name"

  ### Erlang

  ```erlang
  ?VCS_REF_HEAD_NAME.
  'vcs.ref.head.name'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_ref_head_name :: :"vcs.ref.head.name"
  def vcs_ref_head_name do
    :"vcs.ref.head.name"
  end

  @doc """
  The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  `head` refers to where you are right now; the current reference at a
  given time.The revision can be a full [hash value (see
  glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
  of the recorded change to a ref within a repository pointing to a
  commit [commit](https://git-scm.com/docs/git-commit) object. It does
  not necessarily have to be a hash; it can simply define a [revision
  number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
  which is an integer that is monotonically increasing. In cases where
  it is identical to the `ref.head.name`, it **SHOULD** still be included.
  It is up to the implementer to decide which value to set as the
  revision based on the VCS system and situational context.

  ### Examples

  ```
  ["9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc", "main", "123", "HEAD"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_head_revision()
      :"vcs.ref.head.revision"

  ### Erlang

  ```erlang
  ?VCS_REF_HEAD_REVISION.
  'vcs.ref.head.revision'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_ref_head_revision :: :"vcs.ref.head.revision"
  def vcs_ref_head_revision do
    :"vcs.ref.head.revision"
  end

  @typedoc """
  The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.


  ### Enum Values
  * `:branch` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
  * `:tag` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
  """
  @type vcs_ref_head_type_values() :: %{
          :branch => :branch,
          :tag => :tag
        }
  @doc """
  The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.


  ### Notes

  `head` refers to where you are right now; the current reference at a
  given time.

  ### Examples

  ```
  ["branch", "tag"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_head_type()
      :"vcs.ref.head.type"

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_head_type_values().branch
      :branch

      iex> %{OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_head_type() => OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_head_type_values().branch}
      %{:"vcs.ref.head.type" => :branch}

  ### Erlang

  ```erlang
  ?VCS_REF_HEAD_TYPE.
  'vcs.ref.head.type'

  ?VCS_REF_HEAD_TYPE_VALUES_BRANCH.
  'branch'

  \#{?VCS_REF_HEAD_TYPE => ?VCS_REF_HEAD_TYPE_VALUES_BRANCH}.
  \#{'vcs.ref.head.type' => 'branch'}
  ```

  <!-- tabs-close -->
  """
  @spec vcs_ref_head_type :: :"vcs.ref.head.type"
  def vcs_ref_head_type do
    :"vcs.ref.head.type"
  end

  @spec vcs_ref_head_type_values() :: vcs_ref_head_type_values()
  def vcs_ref_head_type_values() do
    %{
      :branch => :branch,
      :tag => :tag
    }
  end

  @typedoc """
  The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.


  ### Enum Values
  * `:branch` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
  * `:tag` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
  """
  @type vcs_ref_type_values() :: %{
          :branch => :branch,
          :tag => :tag
        }
  @doc """
  The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.


  ### Examples

  ```
  ["branch", "tag"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_type()
      :"vcs.ref.type"

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_type_values().branch
      :branch

      iex> %{OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_type() => OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_ref_type_values().branch}
      %{:"vcs.ref.type" => :branch}

  ### Erlang

  ```erlang
  ?VCS_REF_TYPE.
  'vcs.ref.type'

  ?VCS_REF_TYPE_VALUES_BRANCH.
  'branch'

  \#{?VCS_REF_TYPE => ?VCS_REF_TYPE_VALUES_BRANCH}.
  \#{'vcs.ref.type' => 'branch'}
  ```

  <!-- tabs-close -->
  """
  @spec vcs_ref_type :: :"vcs.ref.type"
  def vcs_ref_type do
    :"vcs.ref.type"
  end

  @spec vcs_ref_type_values() :: vcs_ref_type_values()
  def vcs_ref_type_values() do
    %{
      :branch => :branch,
      :tag => :tag
    }
  end

  @deprecated """
  Deprecated, use `vcs.change.id` instead.
  """
  @spec vcs_repository_change_id :: :"vcs.repository.change.id"
  def vcs_repository_change_id do
    :"vcs.repository.change.id"
  end

  @deprecated """
  Deprecated, use `vcs.change.title` instead.
  """
  @spec vcs_repository_change_title :: :"vcs.repository.change.title"
  def vcs_repository_change_title do
    :"vcs.repository.change.title"
  end

  @doc """
  The human readable name of the repository. It **SHOULD** **NOT** include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  Due to it only being the name, it can clash with forks of the same
  repository if collecting telemetry across multiple orgs or groups in
  the same backends.

  ### Examples

  ```
  ["semantic-conventions", "my-cool-repo"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_repository_name()
      :"vcs.repository.name"

  ### Erlang

  ```erlang
  ?VCS_REPOSITORY_NAME.
  'vcs.repository.name'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_repository_name :: :"vcs.repository.name"
  def vcs_repository_name do
    :"vcs.repository.name"
  end

  @deprecated """
  Deprecated, use `vcs.ref.head.name` instead.
  """
  @spec vcs_repository_ref_name :: :"vcs.repository.ref.name"
  def vcs_repository_ref_name do
    :"vcs.repository.ref.name"
  end

  @deprecated """
  Deprecated, use `vcs.ref.head.revision` instead.
  """
  @spec vcs_repository_ref_revision :: :"vcs.repository.ref.revision"
  def vcs_repository_ref_revision do
    :"vcs.repository.ref.revision"
  end

  @typedoc """
  Deprecated, use `vcs.ref.head.type` instead.


  ### Enum Values
  * `:branch` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
  * `:tag` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
  """
  @type vcs_repository_ref_type_values() :: %{
          :branch => :branch,
          :tag => :tag
        }
  @deprecated """
  Deprecated, use `vcs.ref.head.type` instead.
  """
  @spec vcs_repository_ref_type :: :"vcs.repository.ref.type"
  def vcs_repository_ref_type do
    :"vcs.repository.ref.type"
  end

  @spec vcs_repository_ref_type_values() :: vcs_repository_ref_type_values()
  def vcs_repository_ref_type_values() do
    %{
      :branch => :branch,
      :tag => :tag
    }
  end

  @doc """
  The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.

  ### Value type

  Value must be of type `atom() | String.t()`.
  ### Notes

  In Git Version Control Systems, the canonical URL **SHOULD** **NOT** include
  the `.git` extension.

  ### Examples

  ```
  ["https://github.com/opentelemetry/open-telemetry-collector-contrib", "https://gitlab.com/my-org/my-project/my-projects-project/repo"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_repository_url_full()
      :"vcs.repository.url.full"

  ### Erlang

  ```erlang
  ?VCS_REPOSITORY_URL_FULL.
  'vcs.repository.url.full'
  ```

  <!-- tabs-close -->
  """
  @spec vcs_repository_url_full :: :"vcs.repository.url.full"
  def vcs_repository_url_full do
    :"vcs.repository.url.full"
  end

  @typedoc """
  The type of revision comparison.


  ### Enum Values
  * `:behind` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - How many revisions the change is behind the target ref.
  * `:ahead` ^[e](`m:OpenTelemetry.SemConv#experimental`)^ - How many revisions the change is ahead of the target ref.
  """
  @type vcs_revision_delta_direction_values() :: %{
          :behind => :behind,
          :ahead => :ahead
        }
  @doc """
  The type of revision comparison.


  ### Examples

  ```
  ["ahead", "behind"]
  ```

  <!-- tabs-open -->

  ### Elixir

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_revision_delta_direction()
      :"vcs.revision_delta.direction"

      iex> OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_revision_delta_direction_values().behind
      :behind

      iex> %{OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_revision_delta_direction() => OpenTelemetry.SemConv.Incubating.VCSAttributes.vcs_revision_delta_direction_values().behind}
      %{:"vcs.revision_delta.direction" => :behind}

  ### Erlang

  ```erlang
  ?VCS_REVISION_DELTA_DIRECTION.
  'vcs.revision_delta.direction'

  ?VCS_REVISION_DELTA_DIRECTION_VALUES_BEHIND.
  'behind'

  \#{?VCS_REVISION_DELTA_DIRECTION => ?VCS_REVISION_DELTA_DIRECTION_VALUES_BEHIND}.
  \#{'vcs.revision_delta.direction' => 'behind'}
  ```

  <!-- tabs-close -->
  """
  @spec vcs_revision_delta_direction :: :"vcs.revision_delta.direction"
  def vcs_revision_delta_direction do
    :"vcs.revision_delta.direction"
  end

  @spec vcs_revision_delta_direction_values() :: vcs_revision_delta_direction_values()
  def vcs_revision_delta_direction_values() do
    %{
      :behind => :behind,
      :ahead => :ahead
    }
  end
end
